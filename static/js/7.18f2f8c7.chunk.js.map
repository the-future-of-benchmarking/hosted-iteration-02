{"version":3,"sources":["components/BenchmarkCreationScreen.jsx"],"names":["BenchmarkCreationScreenComponent","props","gitInfo","validate","data","errors","name","description","unit","lowerBound","upperBound","length","isFormFieldValid","meta","touched","error","showError","message","toast","current","show","severity","summary","detail","life","showInfo","showSuccess","state","networkGuess","React","createRef","onSubmit","bind","getFormErrorMessage","a","this","web3","eth","net","getNetworkType","setState","form","factory","BenchmarkFactory","provision","client","getDetails","returnedDetails","Synchronization","addItem","best","average","averageRated","submitted","restart","console","className","ref","title","legend","currentAccount","commit","shortHash","initialValues","render","handleSubmit","input","id","autoFocus","classNames","htmlFor","parse","value","parseFloat","inputId","showButtons","buttonLayout","step","decrementButtonClassName","incrementButtonClassName","incrementButtonIcon","decrementButtonIcon","type","label","contractAddress","style","backgroundColor","color","template","Component"],"mappings":"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","file":"static/js/7.18f2f8c7.chunk.js","sourcesContent":["import { Card } from \"primereact/card\"\nimport React, { Component } from \"react\"\nimport { Fieldset } from 'primereact/fieldset';\nimport GitInfo from 'react-git-info/macro';\nimport { InputText } from 'primereact/inputtext';\nimport { InputNumber } from 'primereact/inputnumber';\nimport { Chip } from 'primereact/chip';\nimport { Button } from 'primereact/button';\nimport { classNames } from 'primereact/utils';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { Toast } from \"primereact/toast\";\nimport { Field, Form } from \"react-final-form\";\nimport \"./BenchmarkCreation.css\"\nimport { Synchronization } from \"Synchronization\";\nimport { BenchmarkFactory } from \"BenchmarkClient\";\n\nclass BenchmarkCreationScreenComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            networkGuess: \"\",\n        }\n        this.toast = React.createRef();\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.isFormFieldValid = this.isFormFieldValid.bind(this)\n        this.getFormErrorMessage = this.getFormErrorMessage.bind(this)\n        this.validate = this.validate.bind(this)\n    }\n\n    gitInfo = GitInfo();\n\n    async componentDidMount() {\n        let networkGuess = await this.props.web3.eth.net.getNetworkType();\n        this.setState({ networkGuess })\n    }\n\n    validate = (data) => {\n\n        let errors = {};\n\n        if (!data.name) {\n            errors.name = \"Bitte Name eingeben\"\n        }\n\n        if (!data.description) {\n            errors.description = \"Bitte Beschreibung eingeben\"\n        }\n\n        if (!data.unit) {\n            errors.unit = \"Bitte Einheit eingeben\"\n        }\n\n        if (!data.lowerBound) {\n            errors.lowerBound = \"Bitte untere Grenze eingeben\"\n        }\n\n        if (!data.upperBound) {\n            errors.upperBound = \"Bitte obere Grenze eingeben\"\n        }\n\n        // \n\n        if (data.name.length > 32) {\n            errors.name = \"Name ist zu lang, maximal 32 Zeichen\"\n        }\n\n        if (data.description.length > 32) {\n            errors.description = \"Beschreibung ist zu lang, maximal 32 Zeichen\"\n        }\n\n        if (data.unit.length > 32) {\n            errors.unit = \"Einheit ist zu lang, maximal 32 Zeichen\"\n        }\n\n\n        return errors;\n    };\n\n\n\n    async onSubmit(data, form) {\n        try {\n            const factory = new BenchmarkFactory(this.props.web3)\n            const client = await factory.provision(data.name, data.lowerBound, data.upperBound, data.unit, data.description)\n\n            const returnedDetails = await client.getDetails()\n\n            await Synchronization.addItem({best: null, average: null, averageRated: null, ...returnedDetails})\n\n            this.setState({ submitted: true })\n            this.showSuccess(\"Angelegt\")\n            form.restart();\n        } catch (e) {\n            console.error(e)\n            this.showError(e.message);\n        }\n\n    };\n\n    isFormFieldValid = (meta) => !!(meta.touched && meta.error);\n    getFormErrorMessage(meta) {\n        return this.isFormFieldValid(meta) && <small className=\"p-error p-mb-2\">{meta.error}</small>;\n    };\n\n    showError = (message) => {\n        this.toast.current.show({ severity: 'error', summary: 'Fehler', detail: message, life: 5000 });\n    }\n\n    showInfo = (message) => {\n        this.toast.current.show({ severity: 'info', summary: 'Info', detail: message, life: 5000 })\n    }\n\n    showSuccess = (message) => {\n        this.toast.current.show({ severity: 'success', summary: 'Erfolg', detail: message, life: 5000 })\n    }\n\n    render() {\n        return (<>\n            <Toast ref={this.toast} />\n            <div className=\"p-grid\">\n\n                <div className=\"p-col-6 p-offset-3\">\n                    <Card title=\"Benchmark erstellen\">\n                        <div className=\"p-grid\">\n                            <div className=\"p-col-6\">\n                                <Fieldset legend=\"Account\">\n                                    {this.props.currentAccount}\n                                </Fieldset>\n                            </div>\n                            <div className=\"p-col-3\">\n                                <Fieldset legend=\"Network Guess\">\n                                    {this.state.networkGuess}\n                                </Fieldset>\n                            </div>\n                            <div className=\"p-col-3\">\n                                <Fieldset legend=\"Frontend Version\">\n                                    {this.gitInfo.commit.shortHash}\n                                </Fieldset>\n                            </div>\n\n\n                            <div className=\"p-col-10 p-offset-1\">\n                                <div className=\"creation\">\n                                    <Form onSubmit={this.onSubmit} initialValues={{ name: '', description: '', unit: '', lowerBound: 1, upperBound: 2 }} validate={this.validate} render={({ handleSubmit }) => (\n                                        <form onSubmit={handleSubmit} className=\"p-fluid\">\n                                            <Field name=\"name\" render={({ input, meta }) => (\n                                                <div className=\"p-field p-mt-2\">\n                                                    <span className=\"p-float-label\">\n                                                        <InputText id=\"name\" {...input} autoFocus className={classNames({ 'p-invalid': this.isFormFieldValid(meta) })} />\n                                                        <label htmlFor=\"name\" className={classNames({ 'p-error': this.isFormFieldValid(meta) })}>Name*</label>\n                                                    </span>\n                                                    {this.getFormErrorMessage(meta)}\n\n                                                </div>\n                                            )} />\n\n                                            <Field name=\"description\" render={({ input, meta }) => (\n                                                <div className=\"p-field p-mt-2\">\n                                                    <span className=\"p-float-label\">\n                                                        <InputTextarea id=\"desc\" {...input} className={classNames({ 'p-invalid': this.isFormFieldValid(meta) })} />\n                                                        <label htmlFor=\"desc\" className={classNames({ 'p-error': this.isFormFieldValid(meta) })}>Beschreibung*</label>\n                                                    </span>\n                                                    {this.getFormErrorMessage(meta)}\n\n                                                </div>\n                                            )} />\n\n                                            <Field name=\"unit\" render={({ input, meta }) => (\n                                                <div className=\"p-field p-mt-2\">\n                                                    <span className=\"p-float-label\">\n                                                        <InputText id=\"unit\" {...input} className={classNames({ 'p-invalid': this.isFormFieldValid(meta) })} />\n                                                        <label htmlFor=\"unit\" className={classNames({ 'p-error': this.isFormFieldValid(meta) })}>Einheit*</label>\n                                                    </span>\n                                                    {this.getFormErrorMessage(meta)}\n\n                                                </div>\n                                            )} />\n\n                                             <Field name=\"lowerBound\" parse={(value, name) => parseFloat(value.value)} render={({ input, meta }) => (\n                                                <div className=\"p-field p-mt-2\">\n                                                    <span className=\"p-float-label\">\n                                                        <InputNumber inputId=\"lowerBound\" {...input} showButtons buttonLayout=\"horizontal\" step={0.001} className={classNames({ 'p-invalid': this.isFormFieldValid(meta) })}\n                                                            decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" />\n                                                        <label htmlFor=\"lowerBound\" className={classNames({ 'p-error': this.isFormFieldValid(meta) })}>Untergrenze*</label>\n                                                    </span>\n                                                    {this.getFormErrorMessage(meta)}\n\n                                                </div>\n                                            )} /> \n\n                                            <Field name=\"upperBound\" parse={(value, name) => parseFloat(value.value)} render={({ input, meta }) => (\n                                                <div className=\"p-field p-mt-2\">\n                                                    <span className=\"p-float-label\">\n                                                        <InputNumber inputId=\"upperBound\" {...input} showButtons buttonLayout=\"horizontal\" step={0.001} className={classNames({ 'p-invalid': this.isFormFieldValid(meta) })}\n                                                            decrementButtonClassName=\"p-button-danger\" incrementButtonClassName=\"p-button-success\" incrementButtonIcon=\"pi pi-plus\" decrementButtonIcon=\"pi pi-minus\" />\n                                                        <label htmlFor=\"upperBound\" className={classNames({ 'p-error': this.isFormFieldValid(meta) })}>Obergrenze*</label>\n                                                    </span>\n                                                    {this.getFormErrorMessage(meta)}\n\n                                                </div>\n                                            )} />\n\n                                            <Button type=\"submit\" label=\"Submit\" className=\"p-mt-2\" />\n                                        </form>\n                                    )} />\n\n                                    {this.state.contractAddress ? <div className=\"p-field\">\n                                        <div className=\"p-grid\">\n                                            <div className=\"p-col-12\">\n                                                <Fieldset legend=\"Contract Adresse\">\n                                                    <Chip style={{ backgroundColor: \"#4caf50\", color: \"#ffffff\" }} template={this.state.contractAddress}></Chip>\n                                                </Fieldset>\n                                            </div>\n                                        </div>\n                                    </div> : \"\"}\n\n                                </div>\n                            </div>\n                        </div>\n                    </Card>\n                </div>\n\n            </div></>)\n    }\n\n}\n\nexport default BenchmarkCreationScreenComponent"],"sourceRoot":""}